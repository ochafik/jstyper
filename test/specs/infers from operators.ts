// SEMI-AUTOGENERATED FILE, PLEASE ONLY EDIT INPUTS.
//
// REGENERATE OUTPUTS AND METADATA WITH `npm run update-specs`.

import {TestSpec} from '../../src/testing/test_spec';

export default {
  files: {
    'input.js': `
      (a, b) => { a in b; };
      (a) => { 'foo' in a; };

      (a, b) => { a instanceof b; };
      (a, b) => { a = b; };
      (a, b = 1) => { a = b; };
      (a, b) => { a + b; };
      (a, b, c = 1) => { c = a + b; };
      (a, b = 1, c = '') => { c = a + b; };
      
      (a, b) => { a += b; };
      (a = 1, b) => { a += b; };

      (a, b) => { a - b; };
      (a, b) => { a -= b; };
      (a, b) => { a * b; };
      (a, b) => { a *= b; };
      (a, b) => { a ** b; };
      (a, b) => { a **= b; };
      (a, b) => { a / b; };
      (a, b) => { a /= b; };
      (a, b) => { a % b; };
      (a, b) => { a %= b; };
      (a, b) => { a << b; };
      (a, b) => { a <<= b; };
      (a, b) => { a >> b; };
      (a, b) => { a >>= b; };
      (a, b) => { a >>> b; };
      (a, b) => { a >>>= b; };
      (a, b) => { a & b; };
      (a, b) => { a &= b; };
      (a, b) => { a | b; };
      (a, b) => { a |= b; };
      (a, b) => { a ^ b; };
      (a, b) => { a ^= b; };

      (a, b) => { a == b; };
      (a, b) => { a === b; };
      (a, b) => { a != b; };
      (a, b) => { a !== b; };

      (a, b) => { a < b; };
      (a, b) => { a <= b; };
      (a, b) => { a > b; };
      (a, b) => { a >= b; };

      (a = 1, b) => { a < b; };
      (a = 1, b) => { a <= b; };
      (a = 1, b) => { a > b; };
      (a = 1, b) => { a >= b; };

      (a, b = '') => { a < b; };
      (a, b = '') => { a <= b; };
      (a, b = '') => { a > b; };
      (a, b = '') => { a >= b; };
      
      (a, b) => { a || b; };
      (a, b) => { a && b; };
      (a, b) => { a ^^ b; };
      
      (a) => { a++; };
      (a) => { ++a; };
      (a) => { a--; };
      (a) => { --a; };
      (a) => { -a; };
      (a) => { +a; };
      (a) => { ~a; };
      (a) => { !a; };
    `
  },
  options: {},
  result: {
    files: {
      'input.js': `
      (a: string, b) => { a in b; };
      (a: {readonly foo?: any}) => { 'foo' in a; };

      (a, b) => { a instanceof b; };
      (a, b) => { a = b; };
      (a: number, b: number = 1) => { a = b; };
      (a, b) => { a + b; };
      (a: number, b: number, c: number = 1) => { c = a + b; };
      (a, b: number = 1, c: string = '') => { c = a + b; };
      
      (a, b) => { a += b; };
      (a: number = 1, b: number) => { a += b; };

      (a: number, b: number) => { a - b; };
      (a: number, b: number) => { a -= b; };
      (a: number, b: number) => { a * b; };
      (a: number, b: number) => { a *= b; };
      (a: number, b: number) => { a ** b; };
      (a: number, b: number) => { a **= b; };
      (a: number, b: number) => { a / b; };
      (a: number, b: number) => { a /= b; };
      (a: number, b: number) => { a % b; };
      (a: number, b: number) => { a %= b; };
      (a: number, b: number) => { a << b; };
      (a: number, b: number) => { a <<= b; };
      (a: number, b: number) => { a >> b; };
      (a: number, b: number) => { a >>= b; };
      (a: number, b: number) => { a >>> b; };
      (a: number, b: number) => { a >>>= b; };
      (a: number, b: number) => { a & b; };
      (a: number, b: number) => { a &= b; };
      (a: number, b: number) => { a | b; };
      (a: number, b: number) => { a |= b; };
      (a: number, b: number) => { a ^ b; };
      (a: number, b: number) => { a ^= b; };

      (a, b) => { a == b; };
      (a, b) => { a === b; };
      (a, b) => { a != b; };
      (a, b) => { a !== b; };

      (a, b) => { a < b; };
      (a, b) => { a <= b; };
      (a, b) => { a > b; };
      (a, b) => { a >= b; };

      (a: number = 1, b: number) => { a < b; };
      (a: number = 1, b: number) => { a <= b; };
      (a: number = 1, b: number) => { a > b; };
      (a: number = 1, b: number) => { a >= b; };

      (a: string, b: string = '') => { a < b; };
      (a: string, b: string = '') => { a <= b; };
      (a: string, b: string = '') => { a > b; };
      (a: string, b: string = '') => { a >= b; };
      
      (a: boolean, b: boolean) => { a || b; };
      (a: boolean, b: boolean) => { a && b; };
      (a: number, b: number) => { a ^^ b; };
      
      (a: number) => { a++; };
      (a: number) => { ++a; };
      (a: number) => { a--; };
      (a: number) => { --a; };
      (a: number) => { -a; };
      (a: number) => { +a; };
      (a: number) => { ~a; };
      (a: boolean) => { !a; };
    `
    },
    metadata: {
      inferencePasses: 2
    }
  }
} as TestSpec
