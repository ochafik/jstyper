import * as fs from 'fs';

import {Options, defaultOptions} from '../options';
import {TyperExecutionResult, TyperExecutionMetadata} from '../typer';
import {mapValues} from '../utils/maps';
import {pseudoJson} from '../utils/pseudo_json';
import {deindent} from '../utils/strings';

export declare interface TestSpec {
  files: {[fileName: string]: string},
  options: Partial<Options>,
  result: TyperExecutionResult
}

function deindentSpec(spec: TestSpec): TestSpec {
  if (!spec.files) throw new Error(`O FILES in ${JSON.stringify(spec)}`);
  if (!spec.result.files) throw new Error(`O RESULT FILES in ${JSON.stringify(spec)}`);
  return {
    files: mapValues(spec.files, deindent),
    options: spec.options,
    result: {
      files: mapValues(spec.result.files, deindent),
      metadata: spec.result.metadata
    }
  }
}

function isTestSpec(obj: any): obj is TestSpec {
  return 'files' in obj && 'options' in obj && 'result' in obj && 'files' in obj.result && 'metadata' in obj.result;
}
// function isOldTestSpec(obj: any): obj is OldTestSpec {
//   return 'inputs' in obj && 'outputs' in obj && 'metadata' in obj;
// }
export function readSpec(fileName: string): TestSpec {
  const mod = module.require(fileName);
  let spec = mod['default'];
  // if (isOldTestSpec(spec)) {
  //   spec = <TestSpec>{
  //     files: spec.inputs,
  //     options: Object.create(defaultOptions),
  //     result: {
  //       files: spec.outputs,
  //       metadata: spec.metadata
  //     }
  //   }
  // }
  if (!isTestSpec(spec)) {
    throw new Error(`Bad spec format: ${JSON.stringify(Object.keys(spec), null, 2)}`);
  }
  const deindented = deindentSpec(spec);
  return deindented;
}

export async function writeSpec(fileName: string, spec: TestSpec) {
  spec = {...spec};
  const src = `// SEMI-AUTOGENERATED FILE, PLEASE ONLY EDIT INPUTS.\n` +
      `//\n` +
      `// REGENERATE OUTPUTS AND METADATA WITH \`npm run update-specs\`.\n` +
      `\n` +
      `import {TestSpec} from '../../src/testing/test_spec';\n` +
      `\n` +
      `export default ${pseudoJson(spec)} as TestSpec\n`;

  await new Promise((resolve, reject) => {fs.writeFile(fileName, src, err => {
                      if (err)
                        reject(err);
                      else
                        resolve();
                    })});
}
